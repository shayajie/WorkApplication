package test.greendao.bean;

import java.util.List;
import test.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import test.greendao.dao.DoorDao;
import test.greendao.dao.ManagerDao;
import test.greendao.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long userId;
    private String name;
    private String password;
    private String phone;
    private Long managerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Manager manager;
    private Long manager__resolvedKey;

    private List<Door> doors;

    public User() {
    }

    public User(Long userId) {
        this.userId = userId;
    }

    public User(Long userId, String name, String password, String phone, Long managerId) {
        this.userId = userId;
        this.name = name;
        this.password = password;
        this.phone = phone;
        this.managerId = managerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public Long getManagerId() {
        return managerId;
    }

    public void setManagerId(Long managerId) {
        this.managerId = managerId;
    }

    /** To-one relationship, resolved on first access. */
    public Manager getManager() {
        Long __key = this.managerId;
        if (manager__resolvedKey == null || !manager__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ManagerDao targetDao = daoSession.getManagerDao();
            Manager managerNew = targetDao.load(__key);
            synchronized (this) {
                manager = managerNew;
            	manager__resolvedKey = __key;
            }
        }
        return manager;
    }

    public void setManager(Manager manager) {
        synchronized (this) {
            this.manager = manager;
            managerId = manager == null ? null : manager.getManagerId();
            manager__resolvedKey = managerId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Door> getDoors() {
        if (doors == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DoorDao targetDao = daoSession.getDoorDao();
            List<Door> doorsNew = targetDao._queryUser_Doors(userId);
            synchronized (this) {
                if(doors == null) {
                    doors = doorsNew;
                }
            }
        }
        return doors;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDoors() {
        doors = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public String toString() {

        return "User{" +
                "userId=" + userId +
                ", name='" + name + '\'' +
                ", password='" + password + '\'' +
                ", managerId=" + managerId +
                ", phone='" + phone + '\'' +
                '}';
    }
}
