package test.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import test.greendao.bean.Door;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOOR".
*/
public class DoorDao extends AbstractDao<Door, Long> {

    public static final String TABLENAME = "DOOR";

    /**
     * Properties of entity Door.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DoorId = new Property(0, Long.class, "doorId", true, "DOOR_ID");
        public final static Property Doorname = new Property(1, String.class, "doorname", false, "DOORNAME");
        public final static Property Door = new Property(2, String.class, "door", false, "DOOR");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Encoderpulses = new Property(4, String.class, "encoderpulses", false, "ENCODERPULSES");
        public final static Property Upperpulse = new Property(5, String.class, "upperpulse", false, "UPPERPULSE");
        public final static Property Lowerpulse = new Property(6, String.class, "lowerpulse", false, "LOWERPULSE");
        public final static Property Password = new Property(7, String.class, "password", false, "PASSWORD");
    };

    private DaoSession daoSession;


    public DoorDao(DaoConfig config) {
        super(config);
    }
    
    public DoorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOOR\" (" + //
                "\"DOOR_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: doorId
                "\"DOORNAME\" TEXT," + // 1: doorname
                "\"DOOR\" TEXT," + // 2: door
                "\"PHONE\" TEXT," + // 3: phone
                "\"ENCODERPULSES\" TEXT," + // 4: encoderpulses
                "\"UPPERPULSE\" TEXT," + // 5: upperpulse
                "\"LOWERPULSE\" TEXT," + // 6: lowerpulse
                "\"PASSWORD\" TEXT);"); // 7: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Door entity) {
        stmt.clearBindings();
 
        Long doorId = entity.getDoorId();
        if (doorId != null) {
            stmt.bindLong(1, doorId);
        }
 
        String doorname = entity.getDoorname();
        if (doorname != null) {
            stmt.bindString(2, doorname);
        }
 
        String door = entity.getDoor();
        if (door != null) {
            stmt.bindString(3, door);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String encoderpulses = entity.getEncoderpulses();
        if (encoderpulses != null) {
            stmt.bindString(5, encoderpulses);
        }
 
        String upperpulse = entity.getUpperpulse();
        if (upperpulse != null) {
            stmt.bindString(6, upperpulse);
        }
 
        String lowerpulse = entity.getLowerpulse();
        if (lowerpulse != null) {
            stmt.bindString(7, lowerpulse);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
    }

    @Override
    protected void attachEntity(Door entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Door readEntity(Cursor cursor, int offset) {
        Door entity = new Door( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // doorId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // doorname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // door
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // encoderpulses
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // upperpulse
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lowerpulse
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Door entity, int offset) {
        entity.setDoorId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDoorname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDoor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEncoderpulses(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpperpulse(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLowerpulse(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Door entity, long rowId) {
        entity.setDoorId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Door entity) {
        if(entity != null) {
            return entity.getDoorId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
